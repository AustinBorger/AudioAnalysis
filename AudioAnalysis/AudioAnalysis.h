#pragma once

#include <Windows.h>
#include <comdef.h>

struct AUDIO_ANALYSIS_DESC {
	FLOAT SampleRate;
};

struct __declspec(uuid("83ff3639-facc-4c7f-9e1f-188246670ad2")) IAudioAnalysisCallback : public IUnknown {
	virtual VOID OnObjectFailure(LPCWSTR File, UINT Line, HRESULT hr) PURE;
};

struct __declspec(uuid("6ec6f647-b334-40d5-ab37-45b5b76ba4ac")) IAudioAnalysis : public IUnknown {
	/* Updates the history buffer with new information.
	** [Buffer] must be in stereo-interleaved format.
	** [BufferFrames] is the number of stereo samples in the buffer. */
	virtual VOID STDMETHODCALLTYPE Post(PFLOAT Buffer, UINT BufferFrames) PURE;

	/* Processes the data in the history buffer, generating all statistics. */
	virtual VOID STDMETHODCALLTYPE Process() PURE;

	/* Returns the number of samples being operated on. */
	virtual UINT STDMETHODCALLTYPE GetNumSamples() PURE;

	/* Returns the number of FFT bins generated by a transform. */
	virtual UINT STDMETHODCALLTYPE GetNumBins() PURE;

	/* Returns the mono mix buffer. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetMonoMix() PURE;

	/* Returns the left mix buffer. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetLeftMix() PURE;

	/* Returns the right mix buffer. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetRightMix() PURE;

	/* Returns the side mix buffer. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetSideMix() PURE;

	/* Returns the mono FFT in decibels. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetMonoTransform() PURE;

	/* Returns the left FFT in decibels. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetLeftTransform() PURE;

	/* Returns the right FFT in decibels. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetRightTransform() PURE;

	/* Returns the side FFT in decibels. */
	virtual CONST PFLOAT STDMETHODCALLTYPE GetSideTransform() PURE;
};

#ifdef _AUDIO_ANALYSIS_DLL_PROJECT
	#define _AUDIO_ANALYSIS_EXPORT_TAG __declspec(dllexport)
#else
	#define _AUDIO_ANALYSIS_EXPORT_TAG __declspec(dllimport)
#endif

/* Creates the analysis object. */
extern "C" HRESULT _AUDIO_ANALYSIS_EXPORT_TAG AudioAnalysisCreate (
	const AUDIO_ANALYSIS_DESC* pDesc,
	IAudioAnalysisCallback* pAudioAnalysisCallback,
	IAudioAnalysis** ppAudioAnalysis
);